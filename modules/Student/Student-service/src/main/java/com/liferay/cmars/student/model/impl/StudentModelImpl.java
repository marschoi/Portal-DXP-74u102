/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.cmars.student.model.impl;

import com.liferay.cmars.student.model.Student;
import com.liferay.cmars.student.model.StudentModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;CMARS_Student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>StudentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentImpl
 * @generated
 */
@JSON(strict = true)
public class StudentModelImpl
	extends BaseModelImpl<Student> implements StudentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the <code>Student</code> interface instead.
	 */
	public static final String TABLE_NAME = "CMARS_Student";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"studentId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"studentCode", Types.VARCHAR}, {"studentName", Types.VARCHAR},
		{"studentEmail", Types.VARCHAR}, {"studentPhone", Types.VARCHAR},
		{"studentGender", Types.VARCHAR}, {"studentAddress", Types.VARCHAR},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"field4", Types.TIMESTAMP},
		{"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("studentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentPhone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CMARS_Student (uuid_ VARCHAR(75) null,studentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,studentCode VARCHAR(75) null,studentName VARCHAR(75) null,studentEmail VARCHAR(75) null,studentPhone VARCHAR(75) null,studentGender VARCHAR(75) null,studentAddress VARCHAR(75) null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table CMARS_Student";

	public static final String ORDER_BY_JPQL =
		" ORDER BY student.studentName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CMARS_Student.studentName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTADDRESS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTCODE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTEMAIL_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTGENDER_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTPHONE_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTNAME_COLUMN_BITMASK = 256L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public StudentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _studentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _studentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Student)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Student, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Student, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Student)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Student, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Student, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Student, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Student, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Student, Object>>();

			attributeGetterFunctions.put("uuid", Student::getUuid);
			attributeGetterFunctions.put("studentId", Student::getStudentId);
			attributeGetterFunctions.put("groupId", Student::getGroupId);
			attributeGetterFunctions.put("companyId", Student::getCompanyId);
			attributeGetterFunctions.put("userId", Student::getUserId);
			attributeGetterFunctions.put("userName", Student::getUserName);
			attributeGetterFunctions.put("createDate", Student::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Student::getModifiedDate);
			attributeGetterFunctions.put(
				"studentCode", Student::getStudentCode);
			attributeGetterFunctions.put(
				"studentName", Student::getStudentName);
			attributeGetterFunctions.put(
				"studentEmail", Student::getStudentEmail);
			attributeGetterFunctions.put(
				"studentPhone", Student::getStudentPhone);
			attributeGetterFunctions.put(
				"studentGender", Student::getStudentGender);
			attributeGetterFunctions.put(
				"studentAddress", Student::getStudentAddress);
			attributeGetterFunctions.put("field1", Student::getField1);
			attributeGetterFunctions.put("field2", Student::getField2);
			attributeGetterFunctions.put("field3", Student::getField3);
			attributeGetterFunctions.put("field4", Student::getField4);
			attributeGetterFunctions.put("field5", Student::getField5);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Student, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Student, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Student, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Student, String>)Student::setUuid);
			attributeSetterBiConsumers.put(
				"studentId", (BiConsumer<Student, Long>)Student::setStudentId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Student, Long>)Student::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Student, Long>)Student::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Student, Long>)Student::setUserId);
			attributeSetterBiConsumers.put(
				"userName", (BiConsumer<Student, String>)Student::setUserName);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Student, Date>)Student::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Student, Date>)Student::setModifiedDate);
			attributeSetterBiConsumers.put(
				"studentCode",
				(BiConsumer<Student, String>)Student::setStudentCode);
			attributeSetterBiConsumers.put(
				"studentName",
				(BiConsumer<Student, String>)Student::setStudentName);
			attributeSetterBiConsumers.put(
				"studentEmail",
				(BiConsumer<Student, String>)Student::setStudentEmail);
			attributeSetterBiConsumers.put(
				"studentPhone",
				(BiConsumer<Student, String>)Student::setStudentPhone);
			attributeSetterBiConsumers.put(
				"studentGender",
				(BiConsumer<Student, String>)Student::setStudentGender);
			attributeSetterBiConsumers.put(
				"studentAddress",
				(BiConsumer<Student, String>)Student::setStudentAddress);
			attributeSetterBiConsumers.put(
				"field1", (BiConsumer<Student, String>)Student::setField1);
			attributeSetterBiConsumers.put(
				"field2", (BiConsumer<Student, Boolean>)Student::setField2);
			attributeSetterBiConsumers.put(
				"field3", (BiConsumer<Student, Integer>)Student::setField3);
			attributeSetterBiConsumers.put(
				"field4", (BiConsumer<Student, Date>)Student::setField4);
			attributeSetterBiConsumers.put(
				"field5", (BiConsumer<Student, String>)Student::setField5);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentId = studentId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getStudentCode() {
		if (_studentCode == null) {
			return "";
		}
		else {
			return _studentCode;
		}
	}

	@Override
	public void setStudentCode(String studentCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentCode = studentCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentCode() {
		return getColumnOriginalValue("studentCode");
	}

	@JSON
	@Override
	public String getStudentName() {
		if (_studentName == null) {
			return "";
		}
		else {
			return _studentName;
		}
	}

	@Override
	public void setStudentName(String studentName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentName = studentName;
	}

	@JSON
	@Override
	public String getStudentEmail() {
		if (_studentEmail == null) {
			return "";
		}
		else {
			return _studentEmail;
		}
	}

	@Override
	public void setStudentEmail(String studentEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentEmail = studentEmail;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentEmail() {
		return getColumnOriginalValue("studentEmail");
	}

	@JSON
	@Override
	public String getStudentPhone() {
		if (_studentPhone == null) {
			return "";
		}
		else {
			return _studentPhone;
		}
	}

	@Override
	public void setStudentPhone(String studentPhone) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentPhone = studentPhone;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentPhone() {
		return getColumnOriginalValue("studentPhone");
	}

	@JSON
	@Override
	public String getStudentGender() {
		if (_studentGender == null) {
			return "";
		}
		else {
			return _studentGender;
		}
	}

	@Override
	public void setStudentGender(String studentGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentGender = studentGender;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentGender() {
		return getColumnOriginalValue("studentGender");
	}

	@JSON
	@Override
	public String getStudentAddress() {
		if (_studentAddress == null) {
			return "";
		}
		else {
			return _studentAddress;
		}
	}

	@Override
	public void setStudentAddress(String studentAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_studentAddress = studentAddress;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalStudentAddress() {
		return getColumnOriginalValue("studentAddress");
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Student.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Student.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Student>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(getUuid());
		studentImpl.setStudentId(getStudentId());
		studentImpl.setGroupId(getGroupId());
		studentImpl.setCompanyId(getCompanyId());
		studentImpl.setUserId(getUserId());
		studentImpl.setUserName(getUserName());
		studentImpl.setCreateDate(getCreateDate());
		studentImpl.setModifiedDate(getModifiedDate());
		studentImpl.setStudentCode(getStudentCode());
		studentImpl.setStudentName(getStudentName());
		studentImpl.setStudentEmail(getStudentEmail());
		studentImpl.setStudentPhone(getStudentPhone());
		studentImpl.setStudentGender(getStudentGender());
		studentImpl.setStudentAddress(getStudentAddress());
		studentImpl.setField1(getField1());
		studentImpl.setField2(isField2());
		studentImpl.setField3(getField3());
		studentImpl.setField4(getField4());
		studentImpl.setField5(getField5());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public Student cloneWithOriginalValues() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		studentImpl.setStudentId(
			this.<Long>getColumnOriginalValue("studentId"));
		studentImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		studentImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		studentImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		studentImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		studentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		studentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		studentImpl.setStudentCode(
			this.<String>getColumnOriginalValue("studentCode"));
		studentImpl.setStudentName(
			this.<String>getColumnOriginalValue("studentName"));
		studentImpl.setStudentEmail(
			this.<String>getColumnOriginalValue("studentEmail"));
		studentImpl.setStudentPhone(
			this.<String>getColumnOriginalValue("studentPhone"));
		studentImpl.setStudentGender(
			this.<String>getColumnOriginalValue("studentGender"));
		studentImpl.setStudentAddress(
			this.<String>getColumnOriginalValue("studentAddress"));
		studentImpl.setField1(this.<String>getColumnOriginalValue("field1"));
		studentImpl.setField2(this.<Boolean>getColumnOriginalValue("field2"));
		studentImpl.setField3(this.<Integer>getColumnOriginalValue("field3"));
		studentImpl.setField4(this.<Date>getColumnOriginalValue("field4"));
		studentImpl.setField5(this.<String>getColumnOriginalValue("field5"));

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		int value = 0;

		value = getStudentName().compareTo(student.getStudentName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Student)) {
			return false;
		}

		Student student = (Student)object;

		long primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.uuid = getUuid();

		String uuid = studentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			studentCacheModel.uuid = null;
		}

		studentCacheModel.studentId = getStudentId();

		studentCacheModel.groupId = getGroupId();

		studentCacheModel.companyId = getCompanyId();

		studentCacheModel.userId = getUserId();

		studentCacheModel.userName = getUserName();

		String userName = studentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			studentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			studentCacheModel.createDate = createDate.getTime();
		}
		else {
			studentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			studentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			studentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		studentCacheModel.studentCode = getStudentCode();

		String studentCode = studentCacheModel.studentCode;

		if ((studentCode != null) && (studentCode.length() == 0)) {
			studentCacheModel.studentCode = null;
		}

		studentCacheModel.studentName = getStudentName();

		String studentName = studentCacheModel.studentName;

		if ((studentName != null) && (studentName.length() == 0)) {
			studentCacheModel.studentName = null;
		}

		studentCacheModel.studentEmail = getStudentEmail();

		String studentEmail = studentCacheModel.studentEmail;

		if ((studentEmail != null) && (studentEmail.length() == 0)) {
			studentCacheModel.studentEmail = null;
		}

		studentCacheModel.studentPhone = getStudentPhone();

		String studentPhone = studentCacheModel.studentPhone;

		if ((studentPhone != null) && (studentPhone.length() == 0)) {
			studentCacheModel.studentPhone = null;
		}

		studentCacheModel.studentGender = getStudentGender();

		String studentGender = studentCacheModel.studentGender;

		if ((studentGender != null) && (studentGender.length() == 0)) {
			studentCacheModel.studentGender = null;
		}

		studentCacheModel.studentAddress = getStudentAddress();

		String studentAddress = studentCacheModel.studentAddress;

		if ((studentAddress != null) && (studentAddress.length() == 0)) {
			studentCacheModel.studentAddress = null;
		}

		studentCacheModel.field1 = getField1();

		String field1 = studentCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			studentCacheModel.field1 = null;
		}

		studentCacheModel.field2 = isField2();

		studentCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			studentCacheModel.field4 = field4.getTime();
		}
		else {
			studentCacheModel.field4 = Long.MIN_VALUE;
		}

		studentCacheModel.field5 = getField5();

		String field5 = studentCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			studentCacheModel.field5 = null;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Student, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Student, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Student, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Student)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Student>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Student.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _studentId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _studentCode;
	private String _studentName;
	private String _studentEmail;
	private String _studentPhone;
	private String _studentGender;
	private String _studentAddress;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Student, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Student)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("studentId", _studentId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("studentCode", _studentCode);
		_columnOriginalValues.put("studentName", _studentName);
		_columnOriginalValues.put("studentEmail", _studentEmail);
		_columnOriginalValues.put("studentPhone", _studentPhone);
		_columnOriginalValues.put("studentGender", _studentGender);
		_columnOriginalValues.put("studentAddress", _studentAddress);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("studentId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("userId", 16L);

		columnBitmasks.put("userName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("studentCode", 256L);

		columnBitmasks.put("studentName", 512L);

		columnBitmasks.put("studentEmail", 1024L);

		columnBitmasks.put("studentPhone", 2048L);

		columnBitmasks.put("studentGender", 4096L);

		columnBitmasks.put("studentAddress", 8192L);

		columnBitmasks.put("field1", 16384L);

		columnBitmasks.put("field2", 32768L);

		columnBitmasks.put("field3", 65536L);

		columnBitmasks.put("field4", 131072L);

		columnBitmasks.put("field5", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Student _escapedModel;

}